<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.9">
  <POU Name="PrgMqttCom" Id="{c70f107a-6ca5-4bfb-b775-e2929cbf9dae}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PrgMqttCom
VAR
	fbMqttClient : FB_IotMqttClient;
	bSetParameter : BOOL := TRUE;
	bConnect : BOOL := TRUE;
	
	(* received message *)
	bSubscribed : BOOL;
	sTopicSub : STRING(255) := 'sensor1';
	{attribute 'TcEncoding':='UTF-8'}
	sTopicRcv : STRING(255);
	{attribute 'TcEncoding':='UTF-8'}
	sPayloadRcv : STRING(255);
	fbMessageQueue : FB_IotMqttMessageQueue;
	fbMessage : FB_IotMqttMessage;
	
	hrErrorOccurred : HRESULT; // contains the latest occurred error
	
	fbPLCDBWrite    :  FB_PLCDBWrite(sNetID := '', tTimeout := T#5S);
    myRecord        :  ST_Record;
    ColumnNames     :  ARRAY[0..2] OF STRING(50);
    
	fbJsonDataType	: FB_JsonReadWriteDataType;
	
	nState : INT := 0;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
	bSetParameter := FALSE;
	fbMqttClient.sHostName:= 'localhost';
	fbMqttClient.nHostPort:= 1883;
//	fbMqttClient.sClientId:= 'MyTcMqttClient'; 
	fbMqttClient.sTopicPrefix:= ''; 
//	fbMqttClient.nKeepAlive:= 60; 
//	fbMqttClient.sUserName:= ;
//	fbMqttClient.sUserPassword:= ; 
//	fbMqttClient.stWill:= ; 
//	fbMqttClient.stTLS:= ;
	fbMqttClient.ipMessageQueue := fbMessageQueue;
	
	ColumnNames[0] := 'Timestamp';
	//ColumnNames[1] := 'ID';
	ColumnNames[1] := 'Message';
END_IF

fbMqttClient.Execute(bConnect);
IF fbMqttClient.bError THEN
	// add your error logging here
	hrErrorOccurred := fbMqttClient.hrErrorCode;
END_IF


//if there's a message, read it
IF nState = 0 AND fbMessageQueue.nQueuedMessages > 0 THEN
	IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
		fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
		fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
		nState := 10;
	END_IF
END_IF


//write received data to structure
IF nState = 10 THEN
	fbJsonDataType.SetSymbolFromJson(sPayloadRcv, 'ST_Record', SIZEOF(myRecord), ADR(myRecord));
	nState := 20;
END_IF


//write received structure to DB
IF nState = 20 THEN
	IF fbPLCDBWrite.WriteStruct(
		hDBID:= 1, 
		sTableName:= 'table4_autoIncrement', 
		pRecord:= ADR(myRecord), 
		cbRecord:= SIZEOF(myRecord), 
		pColumnNames:= ADR(ColumnNames) , 
		cbColumnNames:= SIZEOF(ColumnNames))
	THEN
		IF fbPLCDBWrite.bError THEN
			nState := 245; 
			//ipResultEvt := fbPLCDBWrite.ipTcResultEvent;
		ELSE
			nState := 0;
		END_IF
	END_IF
END_IF


IF fbMqttClient.bConnected THEN
	IF NOT bSubscribed THEN
		bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
		IF fbMqttClient.bError THEN
			// add your error logging here
			hrErrorOccurred := fbMqttClient.hrErrorCode;
		END_IF
	END_IF
END_IF]]></ST>
    </Implementation>
    <LineIds Name="PrgMqttCom">
      <LineId Id="6" Count="9" />
      <LineId Id="60" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="208" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="89" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="21" Count="3" />
      <LineId Id="126" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="192" Count="13" />
      <LineId Id="137" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="94" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>